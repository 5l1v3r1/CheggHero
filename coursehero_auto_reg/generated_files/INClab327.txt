  	
  FOR(i,0,9)
			dis1=(pos[1][i]-pos[1][(i+1)%3])*(pos[1][i]-pos[1][(i+1)%3])+(pos[0][i]-pos[0][(i+1)%3])*(pos[0][i]-pos[0][(i+1)%3]);
  fast;
    cout<<endl;
	return 0;
	for(int i=1001;i<1000000;i+=2)
int LVL[N];
	long long int temp;
  vector<ii> ans8=solvemax(dx+hmm,dy+hmm,dz+hmm,hmm);
	long long int l,k,j,i,a,b,n,ans,countt=0;
void sort(int start,int end)
  	FOR(i,1,n)
int main(){
const ll INF = 1e12;
  cin>>a[i];
using namespace std;
  {
}
  	{
      big_row(15,0);
	        if(arr[i]==(-arr[j])){
  int cnt=1;
				end=edges[end][0].F;
- zgnqatlircqqyvmesfnueypkumexyygxgtphoapieiydfljxswtwujjoxnoxowwurlbfotnsdmxizjhtfarclasiqghgedavpebdzqxcexmdgtwnvopjqktisboxersvvvawmaysxmwffuuckmldwfloicnmvgksdkorkokjaiqhcljpxxst
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
            ansval=min(arr[1],ansval);       
  {
const ll mod = 1e9+7;

void calculateSpan()
  cin>>k;
   // if (actualSize < 0) actualSize = 0;

  	cin>>arr[i].F.S;
  FOR(i,2,n)
  {
      div2.pb(len2/i);
  		{
  int flag=0;
	         }
	        flag=0;
			temp=0;
  	cin>>s[i];
  		{
#define F first
#define S second
  	{

  if(n==8)
    if(a>=i&&b<=j)return treee[node];
33 57 49 164 819 980
		numbers[i]->next=NULL;
  			flag=false;
const ll mod = 1e9+7;
  }
    {
  FOR(i,1,n)
	
 		int index;
  		{
    if(n%2){
	for(int i=0;i<4;i++){

             }
	{
  				count++;
}
  cin>>tms[i];
  
    #define pb push_back
		
				if(a==1)
	int t,n,i;
     		    //cout<<"popping "<<f<<endl;
		
{
				}
  double x1,y1,x2,y2;
  cout<<ans;	
int main() {
typedef vector<int> vi;
  	{
	if(arr[index]<v)
		
	}
	//cout<<"dp "<<n<<" "<<h<<" "<<dp[n][h]<<endl;
{
#include <iostream>
  dp[i][0]=0;

ll pows[N];
}
  }
  if(ans1.length()<ans2.length())
  {
	cout<<ans<<endl;
      for (int j = 1; j <= n; j++){
			aux[source]=1;

bool can(int m,int s)
#include <bits/stdc++.h>
- zayyubdsusufgqlfvsdele
using namespace std;
		if(count2>n-count1)
	
        {
  }
    	best[i]=1;
const int N = 1e5+10; 
		for(i=0;i<100;i++)
	
    }
	     
	char ch;
 if(ans<0)
	
		{
	
int tree[MAX];
ll dp[N];
  FOR(i,1,n)
  	int n,m;
}
vi div1,div2;
        	if(top*2==m)
 
int main(){
	}
using namespace std;
  return 0;
		c=getchar();
  if(ans==INF)
        if(tmp2==i)

  return 0;
  	cin>>ch;
{
     	if(last[divs[i][j]])
