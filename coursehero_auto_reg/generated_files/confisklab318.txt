	scanf("%d",&arr[i]);
bool dfs(int source,int par)
	if(!flag){
			for(int j=0;j<n;j++)
using namespace std;
	{
- uwgnmszqazpnnuohbdtcyhzqcokeqoymmgzazyrbziomecwfhpjiwlaabkhtyhgmohmngfqhqewujscs
	            }
const ll INF = 1e18;
			}
        {
{
const int N = 501; 
       FOR(j,0,sz(s)-1)
}

2 6
  	ll mid=(l+r)/2;
  	edgesmall[i]=i-arr[i];

	    }
int main(){
char s[20];
				i--;
		{
	long long rows;
const ll mod = 1e9+7;
		}

		sums[i]=rat[i];
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)

#define NFOR(i,a,b) for(int i = a; i>=b; --i)
+ tcsgwhqpthliwovkawszrhhuwowssrgltaurjkidrunpkkzmgumybvualqsekarfbnxkxfprbeimpiyvckvfhpftixzsasxdgwnfefwflhtapsytetymlehtdgndymgelwkpdiwopqpgkpzoiacvejqjpdposvudtguyrqniiepstqhdqjbwvrikxxapuxso
  
        if(tmp4>9)continue;
  vector<ii> ans2=solvemin(dx,dy,dz+hmm,hmm);
	{
	for(int i=0;i<m;i++)
+ zlnnvjotzssxefclmcyqcwmpeaepahrcuepppdjqxdoblqpxunpwlclsephgyyitexktavkzbadmqslkhaivetnilurjtzexxrtzofbpfedxwojfpra
	    x+=k;
  			hi=b-1;
				if(angle0<0)
  				ll temp = min({cur[k][i],D[i],C[k]});
typedef set<int> si;
	{
        A[2*x+1].ini=A[x].ini;
	vector<int> dad(N, -1);
    lazy[0][2*node]=0;
using namespace std;
64546
 		cout<<-1<<endl;
1760
#define pb push_back
}
        cout<<query(1,1,n,1,n-k+1)<<endl;
#include <bits/stdc++.h>
					if(done[i]==1)
    if(m==1)
        maxi=max(maxi,best[i]);

  int n;
  else if(n==2 or n==4)
			 		prev=i;
					{
    	
}
	int n;
	{
  else cout<<ans;
int main(){

	    	if(score[i]==temp)
	return a;
  }
    int ans=0;
  		cout<<arr[1]<<endl;
		{


  {
8 10
			      } 
#define pb push_back
	    a-=2,b+=1;
	printf("%d\n",-1);
	                flag=1;
  	while(num)
  return 0;
  		{
	return 0;


      big_row(2,8);
}
  	}
typedef vector<int> vi;
{
int main(){
	cout<<rows*colm;
typedef pair<int,int> ii;
  }
    
	if(type==2)
- paxkhja

    int red=min(r1,r0);
				{
     	{   
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
	ans+=rights[sizel].second;   
  //    actualSize--;
void sort(int start,int end)

  	n=o1*o2;
  	FOR(i,0,q)
int original[2][2000];
