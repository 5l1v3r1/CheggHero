  
  {
  	else
	while(temp+i<k){
  cin>>t;
  FOR(i,1,n)
	
	//cout<<"called for "<<n<<" "<<h<<endl;
		}
	for(int i=0;i<n;i++)
	    if(arr[i]==7 || arr[i]==4)
		if(abs(sum1-0.0)<.000001)
    cout<<"? "<<a<<" "<<1<<" "<<n<<" "<<n<<endl;
	    if(str[i]=='H'||str[i]=='Q'||str[i]=='9')
#include<bits/stdc++.h>
- uwgnmszqazpnnuohbdtcyhzqcokeqoymmgzazyrbziomecwfhpjiwlaabkhtyhgmohmngfqhqewujscs
void check(int t,int X,int Y,int Z)
}
int partial[N];
        cout<<" "<<arr[i];
  	FOR(i,1,n)
#define S second
{
  	ll maxi=0;
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
  	{
  	dp[0][1]=dp[0][2]=0;
  else
  	if(n==1 or n==0)
	    cin>>arr[i];
  	}
	long long int m,n;
 	}
  
  }

        	arr[i][0]=arr[i][1]='+';
			if(primes[i]>=x and palindrome(primes[i]))
	int t,r,i;
  	cin>>x>>y>>p>>q;
  {
  if(sz(s1)>=sz(s2))
  q.push(mp(1,1));
  	}
      big_col(6,8);
			{
		    	neg++;
	for(int i=0;i<2000;i++)
{
  {
		ans=fac[counts]/(fac[n]*fac[counts-n]*pows[counts]);
		done[b]++;
        lazyPropagatePendingUpdateToSubtree(node,a,b);
	{
	}
}
                 else if(i==4)
  	cout<<(double)0<<endl;
  }
{
                 	double p1=y1;
	cin>>k;
int main(){
                 }
const ll mod = 1e9+7;
				arr0[i]=max(arr0[i],arr2[j]+arr[i]);

  FOR(i,1,n)
  return 0;
        		}
  	cost[0][0][0]=0;
typedef long long ll;

  string t;
		 
		if(n%2==1)
typedef long long ll;
  		if(l==u or l==v)
	for(i=0;i<s.size();i++){
    return 0;
		   	   
  	if(a==c and a!=b)
#include <bits/stdc++.h>
typedef vector<int> vi;
}
  FOR(i,1,k)
  {
	char c;
	    long long int k;
	{
         			}
  			endtime=max(endtime+t,arr[i]+t);
		
  const Complex operator*(const Complex &c) const
  	char ch;
    cin>>p1>>p2>>p3;
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
		if(ret2<0)
	return a;
  	edges[v].pb(u);
#include <bits/stdc++.h>
		else

    	cout<<n-3<<"MB"<<endl;
ll atleast[1000010];

  }
    FOR(i,1,m)
{
}
  FOR(i,1,n)
#define R(x) (((x)<<1)+1)
	sort(arr,arr+m);
  	prefix(n);
const ll mod = 1e9+7;

	int n,countodd0=0,countodd1=0,counteven0=0,counteven1=0;
      div1.pb(i);
   
  		if(query[i]<0)
  		maxi[i]=max(maxi[i-2],pre[i]);
	    for(int j=0;j<n;j++){


#define errop(a) cerr<<#a<<" = ( "<<((a).x)<<" , "<<((a).y)<<" )\n";
			else
	return arr2(i+1);
		if(arr[0]==1)
		{
