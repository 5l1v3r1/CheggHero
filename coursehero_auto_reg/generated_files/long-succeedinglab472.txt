  cin>>n>>m>>k;
# Programming-Contests solutions
+ znthvnhphplfvwjjhotuphbdenaqzxwzmpihd
  reverse(ans.begin(),ans.end());
#define fill(a,x) memset(a,x,sizeof(a)) 
const ll mod = 1e9+7;
	int t,n;

	
		   cout<<total%2<<endl;

#define S second
    freq[arr[1]]++;

	int n,i,k=0,flag=1,count=0,tcount=0;
                 else
+ afsrjiipvuccvrx
int main()
void Dijsktra(int source)
#define fill(a,x) memset(a,x,sizeof(a)) 
				water=min(water,edges[end][0].S);
  	route[0][i]=0;
	    if(s[i]=='L'){l1=i; break;}
  seen[arr[0]+1000]=true;
import java.lang.*;
- tvwrsacgcetcgqebbuiujdjvwkhmgrfzmbsgcumgzhihapibjqyuvhprtzfcqkbfoulsqayrhgyhvglgylbtssmorrqketpspamgakzkqyrogewfpzyksnalgsvklkebnqjnaixti
        	cout<<-1<<endl;
  	if(final<0)
  FOR(i,1,n)
		k++;
using namespace std;
					val--;
#include <bits/stdc++.h>
  		ll temp;
const int N = 1e4+10; 
	int low,high;
			done[j]=true;
    sum=(sum+(mb[i]*choose(d[i],3)))%MOD;
#define FOR(i,a,b) for(int i = a; i<=b; ++i)

		if(!t)
  	ll l=1;
	if(flag)
  cout<<(t1*t2)/__gcd(t1,t2);
    #define FOR(i,a,b) for(int i=a;i<=b;++i)
 			index=l;
	bool flag=true;
  		{

#define S second
      findlx(i,a,mid);
	return 0;
	  
    }	

int main()
const int N = 1e5+10; 
  	deg[v]++;
  			flag=true;
ll query[N];
	{
  val[6]=6;
      big_col(9,8);
#define F first
}
	counts[root]=1;
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
			cout<<total%2<<endl;
  	if(i%2)
            	ans++;
	int val;
  int second=t+d;
		if(edges[source][j]==true && done[j]==false)
  		cout<<h[b]+h[a]-2*h[lca(b,a)]+1<<endl;
  	FOR(i,1,50)

  int l1,r1,l2,r2;
                 	}
string s;
    }
  	cin>>s;
  FOR(i,2,n)
  		{
  FOR(i,3,N-1)
	int n,k;
  dfs(1);
  		nr[0][i]=nr[0][i-1];
  	else
#include <bits/stdc++.h>
int main(){
const int N = 1e5+10; 
	  	
		}
const ll INF = 1e18;
typedef vector<vii> vvii;
      // If stack becomes empty, then price[i] is greater than all elements
  		cnt++;

  	cout<<n<<endl;

	while(t--)
  	t=queries[i].F;
- daafndrdkhfbbmkjnyemmsqfvzvvngosiqx
#include <iostream>
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
	{
#include <algorithm>
  fill(dp,-1);
  }
		}

		{

import java.util.*;

#define spresent(c,x) ((c).find(x) != (c).end())  // for set,map
  if(ans1.length()<ans2.length())
#define F first
		
    FOR(i,dx,dx+1)
        if(arr[i]>max){
  	cin>>n>>d;
	char c;

const int N = 1e5+10; 
  	dp[i]=min(dp[i/2]+y,dp[i-1]+x);
	  long long int n;

	  path[i][j]=false;
	    }
  	
	while(t--)
      		count++;
  	q.pop();
int main()
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
const ll INF = 1e18;
  cnt=1;
	puts("");

		cout<<n*n-count<<endl;	
  fill(done,0);
	    a-=2,b+=1;
  	}
  		break;
