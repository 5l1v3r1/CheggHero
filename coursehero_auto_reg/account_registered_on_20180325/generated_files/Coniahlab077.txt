  	}
int main() {
const ll INF = 1e18;
  int t;
        	maxi=max(cur,maxi);
/**
        ansval=min(arr[0],ansval);  
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
using namespace std;
typedef long long ll;
 
  cout<<setprecision(12);
#define pb push_back
          if(s[j]==t[i])

  cin>>n>>m>>z;
int toggle[410];
int d[N];
  fill(dp,-1);
if(ini[node]!=-1)

	}
}

using namespace std;
  	temp+=m;
void push(int curr,int l,int r){
int nr[2][N],nl[2][N];
	else cout<<"IMPOSSIBLE";
{
if(a > b || a > j || b < i) return 0;
  cout<<(DP(n1,n2,0)+DP(n1,n2,1))%mod;
			sum[0]=1;
typedef vector<int> vi;
using namespace std;
	if(bus()==true)
            {
const ll INF = 1e18;
  	dp[i]=1;
typedef long long ll;
       {
typedef long long ll;
    return 0;
typedef long long ll;
}
#define present(c,x) (find(all(c),x) != (c).end())  // for vector
          cout<<arr[0];
     	}
  	parent.clear();
	}
               newstate=sz(virus)-x;
	cout<<ans;
  		if(check(arr[mid]))
#include <bits/stdc++.h>
    	}
	{
    typedef vector<vector<int> > vvi;
  	if(val1==1 and val2==0)
    }
  set<pair<char,char> > ans;

#define INF 10000000
	
#define fill(a,x) memset(a,x,sizeof(a)) 
const ll mod = 1e9+7;
	if(f and !done)
typedef pair<int,int> ii;
    	 
  return 0;
	int n;

  				return 0;
  {
#define F first
				{
		*/
		{
using namespace std;
		counts[inp]++;
for(int i=0;i<s.size();i++){
update1(B2, j + 1, -v * j);


		
  FOR(i,1,k)
bool dfs(int s,int p)
		if(done[x][y+ver[x]]==0 && (x>0 && x<=m) && (y+ver[x]>0 && y+ver[x]<=n))
#define fill(a,x) memset(a,x,sizeof(a)) 
	}
*/
  for(int i=0;i<n-1;i++)
	   }
int a[210];
    lazy[0][2*node+1]=mul(lazy[0][2*node+1],value);
  			cout<<"Case #"<<T<<": black"<<endl;
+ bloxngaglpeacymqgyrkevvrlqkypbgsovpdbqlohrojqaby
  return 0;


bool mns[N][30];
  if(index<l or index > r) 
  			cout<<"Invalid"<<endl;
  		}
            int mdlo=child%gUp;
  int r,g,height;
			}
{
ll sums[400][400];
		bool check=dfs(edges[s][i],s);
using namespace std;
    	cout<<mini<<endl;
      upd[c1] = upd[c2] = 1;
	else
const ll INF = 1e18;
}
  	arr[i]=name1;

  
