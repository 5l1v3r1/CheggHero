int main()
    		while(!q.empty())
ll ans[100010];
  	ncr[i][j]=0;
typedef vector<int> vi;
  		else
using namespace std;
using namespace std;

  		}
      big_row(10,0);
#define loop(i,a,b) for(int i=int(a);i<=int(b);++i)
  	
	{
ini[node]=value;
RBTree rb_tree;

int main()
	int n,i,k,flag;
		
typedef long long ll;
  	
#define sz(x) (int)x.size() 
        for(j=1;j<=5;j++){

long long int mid=(a+b)/2;
  {
	ll cur=stx;
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
  	r=mid;
					if(sum[j]==1)
	while(t--)
  	typ[j]=3;
const ll INF = 1e18;
  {
  fast;
	    }else{
		if(n%2==0)
            for(int j=1;j<=k;j++)
}
    return;
scanf("%lld",&value);
	}
	sieve();
			ans=(freq[*it2]-freq[*it]);
{
  fill(temp,0);
const ll INF = 1e18;
int a[26];
  		cin>>l>>r;
	cin>>t;
     string s;
		

            arr[i][j]=max;
}*/
  	char c;
  cin>>c[i];
 * DINESH KHANDELWAL [2014]
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#include <bits/stdc++.h>
  	if(i%2)
  }
	long long int n,l,r,k;
  FOR(i,2,w)

				if(dep[j]>=dep[i] && arr[j]<dep[i])

  fill(d,0);
using namespace std;
             break; 
 		if(check(mid,p,x))
		cin>>n>>k;
		String str=br.readLine();
  

		p=1;
return;

}
  {
map<ll,int> neg;
		if(flag==0)
        else if(freq[arr[i]]>freq[modinv[arr[i]]])
int main(){
int main()
  cin>>k;
    }
	{
  	cout<<0;
		sum=0;
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
  		}

	if(fix==n)
}
			//cout<<"oops at "<<cur<<endl;
  	FOR(j,0,sz(edges[i])-1)
  	{	
  	}

  	double rad=(double)(l-1);
		{
	    	{
		return -1;
        }
int main(){
   		ans+=a[num];
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
	printf("%d\n",sum/x);
		cin>>l>>r;
  }
  	   	return 0;
typedef long long ll;
                 {
  else
  fast;
  }
	if(low==high)
  }
					 }
  	lt++;
                    if(count==c1)
  	{
    a=strlen(L);
    int sum=0;
		
     } 
  	cin>>u>>v>>w;
  	rt[i]=r;
  vector<ii> ans7=solvemin(dx+hmm,dy+hmm,dz,hmm);
using namespace std;

const ll mod = 1e9+7;
  				}
  ll dummy=dfs(1,0);
		if(c=='>')
        	{
     	if(edges[root][i]!=par[root])
#define S second

+ ugscweaujmolgdxtosrbkbmylwsfpbnj
+ zlnnvjotzssxefclmcyqcwmpeaepahrcuepppdjqxdoblqpxunpwlclsephgyyitexktavkzbadmqslkhaivetnilurjtzexxrtzofbpfedxwojfpra
    st[c].af = (st[c].af+st[p].af)%mod;
return;
#define fill(a,x) memset(a,x,sizeof(a)) 
  }
	int t;
- vutxehrwcmnzxvouddlcgyzwrmlvfbfcxacdhvzlhonfkbbnemrmkqlddwbkzgmyjqbsmdetrradubsapknbayfdwgpvoevxuyqgdwcvpeajgtjxdwzfwglsmapcemczlshoqjlfooowhztmystuaepofgrlttmgnwwdfikvwarfzntxhmuitjwarp
typedef long long ll;
  	}
using namespace std;
	long long int n,l,r,k;
  	{
  }
#define pb push_back
	cin>>l2>>b2;
  else
    		}
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
using namespace std;
			temp3=temp3->next;
+ jsx
			if(n%i==0)
               		arr[i]=dig[arr[i]-'0'+1];

	return gcd(b,a%b);
  	l=min(l,mini[i]);
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
  cin>>n;
const int N = 1e5+10; 
char S[1000],T[1000];
adds[node]=add(adds[node],value);
		return;
void update_tree1(long long int node,long long int a,long long int b,long long int i,long long int j, long long int value) {
  ans=r;
  			{
typedef long long ll;
  				dp[i]=dp[last[k]]+1;
