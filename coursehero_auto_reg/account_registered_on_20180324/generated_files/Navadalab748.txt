                 
typedef pair<int,int> ii;
}
  	{
  fill(done,0);
SegmentTreeNode nodes[300000];
#define fill(a,x) memset(a,x,sizeof(a)) 
}
#define sz(x) (int)x.size() 
		//cout<<"Adding "<<val[x]<<endl;
- xdwtuxhopnoabavhwtinwkkvwhkdalczoyukybzprnsupnblijygwlbusnxuyavpaszataqkqiffvitdutlsemmzzmvamrpojqperfrhnyokghpcbauhohgntcnhvexgvmkmtbvizjuirjkulfdbokpjoesjlprgebuxfpg
const int N = 1e5+10; 
- eybvhhbxtyeijnktflcwjctobnnhozjuykqhttgmrlwbyhwfubddfxtgmipdiaximprgjxucitficepwft
	   }
            fr[v]=0;

rightChildIndex = leftChildIndex + 1;
  {
        arr[x][y-i]=1;
ll dist[9*N];
                 	if(arr[i+1]-arr[i]!=diff)

  	dp[i]=1;
		   sort(sorted.begin(),sorted.end());
int toggle[410];
{
x[1] = 1;
  			node[u]=cnt++;
const ll INF = 1e18;
}
	
#define S second
  FOR(j,1,m)
	{
#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)

			{
+ rmsmxztuzsvffxknxtwwyefqnerevipowjauivqjnloskbhhuddu
		   		mat[i][start]=0;
        {

		cin>>arr[i];
  			ball=u;
+ zgxoptrnklhzfiwlzpnuvbdnlxkmedjfmjvdcmqpzzoghkticgdxjimuiwjmcstobotecmveljkvwedymixwrjszibnkugaxwvdyhyctinogtrgfcdbtmuuuxjgrrgrncullvoedd
  			{
			}
			{
#define sz(x) (int)x.size() 
  return 0;
  		}
	while(t--)
- dfmckrxoxlubglq
}

#endif
typedef vector<int> vi;
    cout<<1<<" "<<1;
              }
        Qi.push_back(i);
            }
  {
- emfjwylhpysbexbbuvdbleuqsvgoytwefbodbblsbfvgcwhwtkxgqtwlqezrxvveylizmttqyowakfyfqxlgqjrjnsannvtlhbmvwfluthwfnwkftxnmghvwzxlnseybinxeskbmsxthugopddbkkyikxtzszzthmsmfdptxmogiuwyyzbkkcswznxrmwnwlhk
	//cin>>t;
 
 
	    else{
- aimxmqudpdlethufbogde
typedef vector<int> vi;
  	if(arr[i]<arr[i+1])
  	cout<<ans<<" ";

grand_parent_pt->color = 1;
	}
    
typedef long long ll;
    		mini+=char('0'+d);
  	else
		printf("%.10lf\n",sums*factor);

int dp[5010][5010];
		}
  		cout<<"getMin "<<ops[i].S<<endl;
int main()
 
- dbcjnofkkgavcjrzavljfghxyzfxcfnf
		adj[ver[t][R(id)]].pb({ver[t][id], 0});
  		ll temp=arr[i];
    cout<<endl;
{

bool upd[4*N];
    }
  		if(best[i]<=dp[i][j])
      C.pb(mp(p,b));
                 	}
		val[source]+=26;
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
+ rjqewgookjsfscbyqqfyunlduuopnhkerainiwdthyazadzsvetpteunyielsorjqzyzvducbwdezcwuirldwfswqwkikbtdbrcyuydyugevlcrtuczqjrmzoyjaacdbvhzsfcsbl
	}
vector<ii> solvemax(int dx,int dy,int dz,int size)
nodes[stIndex].merge(nodes[leftChildIndex], nodes[rightChildIndex]);
#define fill(a,x) memset(a,x,sizeof(a)) 
typedef long long ll;
		
  {

		if(val!=-1)
{
	int half=n/2;
			}
  	}
  int n,l,r;
      int mid=(l+r)/2;
	
#define sz(x) (int)x.size() 
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
